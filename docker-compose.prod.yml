version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    container_name: cubos-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cubos}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cubos123}
      POSTGRES_DB: ${POSTGRES_DB:-cubos_interview}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-cubos} -d ${POSTGRES_DB:-cubos_interview}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cubos-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: cubos-backend-prod
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      # Database
      DATABASE_URL: "postgresql://${POSTGRES_USER:-cubos}:${POSTGRES_PASSWORD:-cubos123}@postgres:5432/${POSTGRES_DB:-cubos_interview}"

      # Server
      PORT: "3000"
      NODE_ENV: "production"
      HOST: "0.0.0.0"

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}

      # Redis
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"

      # Frontend URL
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}

      # Email (Resend)
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_VERIFIED_DOMAIN: ${RESEND_VERIFIED_DOMAIN}

      # Cloudflare R2
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_TOKEN: ${R2_TOKEN}
      R2_ADDRESS: ${R2_ADDRESS}
      R2_PUBLIC_URL: ${R2_PUBLIC_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads

  # Serviço para executar migrations e seed
  db-setup:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: cubos-db-setup
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-cubos}:${POSTGRES_PASSWORD:-cubos123}@postgres:5432/${POSTGRES_DB:-cubos_interview}"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Executando migrations...' &&
        yarn prisma migrate deploy &&
        echo 'Compilando seed...' &&
        yarn tsc prisma/seed.ts --outDir dist &&
        echo 'Executando seed...' &&
        node dist/prisma/seed.js &&
        echo 'Setup do banco concluído!'
      "
    restart: "no"

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: cubos-frontend-prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:3000/api}
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
